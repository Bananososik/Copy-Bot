from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from config import Config
from bot import JunctionBot
import asyncio


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_authorized_user(_, __, m: Message):
    return m.from_user.id == Config.AUTHORIZED_USER_ID


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é add_task –Ω–∞ –Ω–æ–≤—É—é:
@JunctionBot.on_message(filters.command("–î–æ–±–∞–≤–∏—Ç—å_–∑–∞–¥–∞—á—É") & filters.create(is_authorized_user))
async def add_task(client, message: Message):
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_states[user_id] = {"stage": "waiting_from", "from": None, "to": None}

        await message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, –û–¢–ö–£–î–ê –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "–§–æ—Ä–º–∞—Ç: https://t.me/channel_name –∏–ª–∏ t.me/channel_name"
        )

    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
def not_command(_, __, message):
    return not message.text.startswith('/')

@JunctionBot.on_message(filters.create(is_authorized_user) & filters.create(not_command) & filters.text)
async def handle_chat_input(client, message: Message):
    try:
        user_id = message.from_user.id
        
        if user_id not in user_states:
            return

        user_state = user_states[user_id]
        chat_link = message.text.strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_identifier
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —á–∏—Å–ª–æ–≤—ã–º ID
            if chat_link.startswith('-100'):
                chat_identifier = int(chat_link)
            else:
                # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
                if chat_link.startswith('https://t.me/+'):
                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                    await message.reply_text(
                        "–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —á–∞—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100).\n"
                        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                        "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –±–æ—Ç—É @RawDataBot\n"
                        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID —á–∞—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞"
                    )
                    return
                elif chat_link.startswith('https://t.me/'):
                    chat_identifier = chat_link.replace('https://t.me/', '')
                elif chat_link.startswith('t.me/'):
                    chat_identifier = chat_link.replace('t.me/', '')
                elif chat_link.startswith('@'):
                    chat_identifier = chat_link[1:]
                else:
                    chat_identifier = chat_link

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await client.get_chat(chat_identifier)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
            if chat.type not in ['group', 'supergroup', 'channel']:
                await message.reply_text(
                    "‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–º.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã."
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await chat.get_member('me')
            if not bot_member.can_send_messages:
                await message.reply_text(
                    "‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."
                )
                return

            if user_state["stage"] == "waiting_from":
                user_state["from"] = {
                    "id": str(chat.id),
                    "title": chat.title
                }
                user_state["stage"] = "waiting_to"
                
                await message.reply_text(
                    "‚úÖ –ß–∞—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
                    "1. ID —á–∞—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)\n"
                    "2. –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name)\n"
                    "3. –°—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É"
                )
                
            elif user_state["stage"] == "waiting_to":
                if str(chat.id) == user_state["from"]["id"]:
                    await message.reply_text("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è!")
                    return

                task = {
                    "id": len(Config.TASKS) + 1,
                    "from_id": user_state["from"]["id"],
                    "to_id": str(chat.id),
                    "from_title": user_state["from"]["title"],
                    "to_title": chat.title
                }
                
                Config.TASKS.append(task)
                Config.save_tasks()

                await message.reply_text(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ #{task['id']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                    f"üì§ –û—Ç–∫—É–¥–∞: {task['from_title']}\n"
                    f"üì• –ö—É–¥–∞: {task['to_title']}\n"
                    f"üÜî ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {task['from_id']}\n"
                    f"üÜî ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {task['to_id']}"
                )

                del user_states[user_id]

        except ValueError as ve:
            await message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞.\n"
                "ID —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å -100"
            )
        except Exception as e:
            error_message = str(e)
            if "USERNAME_NOT_OCCUPIED" in error_message:
                await message.reply_text(
                    "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
                    "–î–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    "1. –£–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º\n"
                    "2. –ß–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                    "–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:\n"
                    "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —á–∞—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)\n"
                    "2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "3. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –∏–∑ –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É @RawDataBot"
                )
            else:
                await message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ:\n{error_message}\n\n"
                    f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    f"1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                    f"2. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    f"3. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)"
                )

    except Exception as e:
        print(f"Debug - General error: {str(e)}")
        await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")




# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
@JunctionBot.on_message(filters.command("–ó–∞–¥–∞—á–∏") & filters.create(is_authorized_user))
async def list_tasks(client, message: Message):
    if not Config.TASKS:
        await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        tasks_list = "\n".join([
            f"–ó–∞–¥–∞—á–∞ #{task['id']}\n"
            f"–û—Ç–∫—É–¥–∞: {task['from_title']}\n"
            f"–ö—É–¥–∞: {task['to_title']}\n"
            for task in Config.TASKS
        ])
        await message.reply_text(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n{tasks_list}")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
@JunctionBot.on_message(filters.command("–£–¥–∞–ª–∏—Ç—å_–∑–∞–¥–∞—á—É") & filters.create(is_authorized_user))
async def delete_task(client, message: Message):
    try:
        if not Config.TASKS:
            await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                f"–ó–∞–¥–∞—á–∞ #{task['id']}: {task['from_title']} ‚Üí {task['to_title']}", 
                callback_data=f"del_{task['id']}"
            )] for task in Config.TASKS
        ])

        await message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )

    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@JunctionBot.on_callback_query(filters.regex(r"del_(\d+)"))
async def handle_delete_confirmation(client, callback_query):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = int(callback_query.data.split("_")[1])
        task = next((task for task in Config.TASKS if task["id"] == task_id), None)
        
        if not task:
            await callback_query.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_{task_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{task_id}")
            ]
        ])

        await callback_query.message.edit_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #{task_id}?\n"
            f"–û—Ç–∫—É–¥–∞: {task['from_title']}\n"
            f"–ö—É–¥–∞: {task['to_title']}",
            reply_markup=keyboard
        )

    except Exception as e:
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@JunctionBot.on_callback_query(filters.regex(r"(confirm|cancel)_(\d+)"))
async def handle_delete_final(client, callback_query):
    try:
        action, task_id = callback_query.data.split("_")
        task_id = int(task_id)
        
        if action == "cancel":
            await callback_query.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        task_index = next((index for index, task in enumerate(Config.TASKS) 
                          if task["id"] == task_id), None)
        
        if task_index is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            deleted_task = Config.TASKS[task_index]
            del Config.TASKS[task_index]
            Config.save_tasks()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º ID –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
            for i, task in enumerate(Config.TASKS, 1):
                task["id"] = i
            Config.save_tasks()
            
            await callback_query.message.edit_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n"
                f"–û—Ç–∫—É–¥–∞: {deleted_task['from_title']}\n"
                f"–ö—É–¥–∞: {deleted_task['to_title']}"
            )
        else:
            await callback_query.message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")